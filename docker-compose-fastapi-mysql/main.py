from fastapi import FastAPI, HTTPException, Depends
# Depends -> FastAPI's dependency injection system 
from sqlalchemy import create_engine, Column, Integer, String, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
from pydantic import BaseModel
from datetime import datetime
import os
from typing import List

# Database configuration
# mysql is the name of mysql container. this is an internal connection, use service name
DATABASE_URL = f"mysql+pymysql://root:password@mysql:3306/userdb"

engine = create_engine(DATABASE_URL)
# session/transaction
SessionLocal = sessionmaker(autocommit=False, autoflush=True, bind=engine)

# to mention that this class is Db model
Base = declarative_base()

# Database Models
class User(Base):
    __tablename__ = "users"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), nullable=False)
    email = Column(String(255), unique=True, index=True, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)

# Pydantic Models
class UserCreate(BaseModel):
    name: str
    email: str

class UserResponse(BaseModel):
    id: int
    name: str
    email: str
    created_at: datetime
    
    class Config:
        from_attributes = True

# FastAPI app
app = FastAPI(title="User Management API", version="1.0.0")

# Database dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        #close the connection after the API is done
        db.close()

# Create tables on startup
@app.on_event("startup")
async def startup():
    Base.metadata.create_all(bind=engine)

# API Endpoints
@app.get("/user", response_model=List[UserResponse])
async def get_users(db: Session = Depends(get_db)):
    """Get all users"""
    users = db.query(User).all()
    return users

@app.post("/user", response_model=UserResponse, status_code=201)
async def create_user(user: UserCreate, db: Session = Depends(get_db)):
    """Create a new user"""
    # Check if user with email already exists
    existing_user = db.query(User).filter(User.email == user.email).first()
    if existing_user:
        raise HTTPException(status_code=400, detail="Email already registered")
    
    # Create new user
    db_user = User(name=user.name, email=user.email)
    db.add(db_user)
    db.commit()
    # get autogenerated fields
    db.refresh(db_user)
    return db_user

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy"}